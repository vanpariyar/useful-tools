{"version":3,"sources":["components/navbar.js","components/sanitizeTitleTool.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","useState","menuStatus","setMenuStatus","className","href","type","onClick","id","SanitizeTitleTool","text","setText","htmlFor","placeholder","value","onChange","e","target","defaultValue","str","replace","toLowerCase","from","i","l","length","RegExp","charAt","string_to_slug","rows","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAEe,SAASA,IAAU,IAAD,EACOC,mBAAS,GADhB,mBACtBC,EADsB,KACVC,EADU,KAE7B,OACI,yBAAKC,UAAU,+CACX,uBAAGC,KAAK,KAAKD,UAAU,gBAAvB,UACA,4BACIA,UAAU,iBACVE,KAAK,SACLC,QAAU,kBAAIJ,GAAgBD,KAE9B,0BAAME,UAAU,yBAEpB,yBACIA,UAAcF,EAAc,gCAAkC,2BAC9DM,GAAG,aACH,wBAAIJ,UAAU,cACd,wBAAIA,UAAU,mBACV,uBAAGC,KAAK,QAAQD,UAAU,YAA1B,QAA0C,0BAAMA,UAAU,WAAhB,eAE9C,wBAAIA,UAAU,YACV,uBAAGC,KAAK,8CAA8CD,UAAU,YAAhE,aAEJ,wBAAIA,UAAU,YACV,uBAAGC,KAAK,SAASD,UAAU,qBAA3B,gBCvBL,SAASK,IAGpB,IAHwC,EAyBhBR,mBAAS,IAzBO,mBAyBjCS,EAzBiC,KAyB3BC,EAzB2B,KA2BxC,OACI,yBAAKP,UAAU,QACX,wBAAIA,UAAU,qCAAd,iBACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,2BAAOQ,QAAQ,YAAf,iCACA,2BACIN,KAAK,OACLF,UAAU,eACVI,GAAG,WACHK,YAAY,kCACZC,MAAQJ,EACRK,SAAW,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOH,WAG5C,yBAAKV,UAAU,cACX,2BAAOQ,QAAQ,+BAAf,aACA,8BACIM,aA1CG,SAAUC,GAG7BA,GADAA,EAAMA,EAAIC,QAAQ,aAAc,KACtBC,cAMV,IAHA,IAAMC,EAAO,kKAGJC,EAAE,EAAGC,EAAEF,EAAKG,OAASF,EAAEC,EAAID,IAEhCJ,EAAMA,EAAIC,QAAQ,IAAIM,OAAOJ,EAAKK,OAAOJ,GAAI,KAJpC,0CAI6CI,OAAOJ,IASjE,OANAJ,EAAMA,EAAIC,QAAQ,IAAK,KAClBA,QAAQ,eAAgB,IACxBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,KACfA,QAAS,MAAO,IAwBUQ,CAAgBlB,GAC/BN,UAAU,eACVI,GAAG,8BACHqB,KAAK,SC3BdC,MAjBf,WACE,OACE,yBAAK1B,UAAU,IACb,kBAACJ,EAAD,MACA,yBAAKI,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,iBACd,kBAACK,EAAD,OAED,yBAAKL,UAAU,iBCJL2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.962c0c7b.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nexport default function Navbar() {\n    const [menuStatus, setMenuStatus] = useState(0);\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <a href=\"./\" className=\"navbar-brand\">Navbar</a>\n            <button \n                className=\"navbar-toggler\" \n                type=\"button\" \n                onClick={ ()=>setMenuStatus( !menuStatus )  }\n            >\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div \n                className= { (menuStatus) ? \"collapse navbar-collapse show\" : \"collapse navbar-collapse\" } \n                id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                <li className=\"nav-item active\">\n                    <a href=\"#home\" className=\"nav-link\">Home <span className=\"sr-only\">(current)</span></a>\n                </li>\n                <li className=\"nav-item\">\n                    <a href=\"https://github.com/vanpariyar/useful-tools/\" className=\"nav-link\" >Features</a>\n                </li>\n                <li className=\"nav-item\">\n                    <a href=\"#never\" className=\"nav-link disabled\">Disabled</a>\n                </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n","import React, { useState }from 'react'\n\nexport default function SanitizeTitleTool() {\n\n\n    const string_to_slug = function (str)\n    {\n        str = str.replace(/^\\s+|\\s+$/g, ''); // trim\n        str = str.toLowerCase();\n\n        // remove accents, swap ñ for n, etc\n        const from = \"àáäâèéëêìíïîòóöôùúüûñçěščřžýúůďťň·/_,:;\";\n        const to   = \"aaaaeeeeiiiioooouuuuncescrzyuudtn------\";\n\n        for (let i=0, l=from.length ; i<l ; i++)\n        {\n            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\n        }\n\n        str = str.replace('.', '-') // replace a dot by a dash \n            .replace(/[^a-z0-9 -]/g, '') // remove invalid chars\n            .replace(/\\s+/g, '-') // collapse whitespace and replace by a dash\n            .replace(/-+/g, '-') // collapse dashes\n            .replace( /\\//g, '' ); // collapse all forward-slashes\n\n        return str;\n    }\n    const [text, setText] = useState('');\n\n    return (\n        <div className=\"card\">\n            <h5 className=\"card-header bg-primary text-white\">Santize Title</h5>\n            <div className=\"card-body\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"titleBox\">Add String / Text to sanitize</label>\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"titleBox\" \n                        placeholder=\"Enter Text / string to sanitize\" \n                        value={ text }\n                        onChange={ (e) => setText( e.target.value ) }\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleFormControlTextarea1\">Your Text</label>\n                    <textarea \n                        defaultValue={ string_to_slug( text ) } \n                        className=\"form-control\" \n                        id=\"exampleFormControlTextarea1\" \n                        rows=\"3\">\n                        \n                    </textarea>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport './bootstrap.min.css'\nimport Navbar from './components/navbar'; \nimport SanitizeTitleTool from './components/sanitizeTitleTool';\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Navbar />\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-3\"></div>\n          <div className=\"col-sm-6 mt-5\">\n           <SanitizeTitleTool /> \n          </div>\n          <div className=\"col-sm-3\"></div>\n        </div>\n      </div>  \n    </div>\n  );\n}\n\nexport default App;\n    \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}